import { StreamParser, updateMessages } from "./streamingParser";

const messages = [
  { content: '\u003Cmimo' },
  { content: '-action\u003E\n\u003Cmimo-confirmation' },
  { content: '\u003E\nI\u0027ll create a' },
  { content: ' Tic Tac Toe game using' },
  { content: ' the components you\u0027ve already provided in' },
  { content: ' your codebase.' },
  { content: '\n\u003C/mimo-confirmation\u003E\n' },
  { content: '\u003C/mimo-action\u003E\n\n\u003Cmimo-action' },
  { content: '\u003E\n\u003Cmimo-explanation' },
  { content: '\u003E\nI\u0027ll create a TicTacToe' },
  { content: ' component that implements the game logic and use' },
  { content: ' the existing UI components to' },
  { content: ' create a complete Tic Tac' },
  { content: ' Toe game. Then' },
  { content: ' I\u0027ll update the App component to include this' },
  { content: ' new game.\n\u003C/mimo-explanation\u003E' },
  { content: '\n\u003C/mimo-action\u003E\n\n\u003Cmimo-' },
  { content: 'action\u003E\u003Cllm_action' },
  { content: '_add_file path=\u0022client' },
  { content: '/src/components/' },
  { content: 'TicTacToe/' },
  { content: 'TicTacToe.tsx\u0022\u003E' },
  { content: '\nimport React, { useState, useEffect } from' },
  { content: ' \u0022react\u0022;\nimport Boar' },
  { content: 'd from \u0022./Board\u0022;\nimport Game' },
  { content: 'Status from \u0022./GameStatus\u0022;\nimport Game' },
  { content: 'Controls from \u0022./GameContro' },
  { content: 'ls\u0022;\nimport GameOver' },
  { content: 'Modal from \u0022./GameOverModal\u0022;\n\ntype' },
  { content: ' Player = \u0022X\u0022 |' },
  { content: ' \u0022O\u0022 | null;\n\n//' },
  { content: ' Winning combinations (rows, columns, di' },
  { content: 'agonals)\nconst winningCombinations' },
  { content: ' = [\n [0, 1,' },
  { content: ' 2], [3, 4, ' },
  { content: '5], [6, 7, 8' },
  { content: '], // rows\n [' },
  { content: '0, 3, 6], [1' },
  { content: ', 4, 7], [2,' },
  { content: ' 5, 8], // columns\n ' },
  { content: '[0, 4, 8], [' },
  { content: '2, 4, 6] ' },
  { content: '// diagonals\n];\n\nconst Tic' },
  { content: 'TacToe: React.FC = ()' },
  { content: ' =\u003E {\n // Game' },
  { content: ' state\n const [board, setBoard]' },
  { content: ' = useState\u003CPlayer[]\u003E(Array(9).' },
  { content: 'fill(null));\n const [current' },
  { content: 'Player, setCurrentPlayer] = useState\u003CPlayer' },
  { content: '\u003E(\u0022X\u0022);\n const [winner' },
  { content: ', setWinner] = useState\u003CPlayer\u003E(' },
  { content: 'null);\n const [win' },
  { content: 'ningCombination, setW' },
  { content: 'inningCombination] = useState\u003Cnumber' },
  { content: '[] | null\u003E(null);\n const [' },
  { content: 'showGameOverModal, setShowGameOverModal]' },
  { content: ' = useState(false);\n const' },
  { content: ' [aiMode, setAiMode' },
  { content: '] = useState(false);\n\n // Check' },
  { content: ' if the game is a draw\n const isD' },
  { content: 'raw = !winner \u0026\u0026 board.every((' },
  { content: 'cell) =\u003E cell !== null);\n\n //' },
  { content: ' Check for a winner\n const' },
  { content: ' checkWinner = (boar' },
  { content: 'dState: Player[]) =\u003E' },
  { content: ' {\n for (const combination of winning' },
  { content: 'Combinations) {\n const [a' },
  { content: ', b, c] = combination;\n ' },
  { content: 'if (boardState[a] \u0026\u0026' },
  { content: ' boardState[a] === boardState[b' },
  { content: '] \u0026\u0026 boardState[a] === boardState' },
  { content: '[c]) {\n set' },
  { content: 'Winner(boardState[a' },
  { content: ']);\n setWinningCombination' },
  { content: '(combination);\n setTimeout(() =\u003E setShowGame' },
  { content: 'OverModal(true), 500' },
  { content: ');\n return true;\n }' },
  { content: '\n }\n return false;\n };' },
  { content: '\n\n // Handle cell click\n const handle' },
  { content: 'CellClick = (index: number) =\u003E' },
  { content: ' {\n if (boar' },
  { content: 'd[index] || winner) return' },
  { content: ';\n\n const newBoard = [...board];' },
  { content: '\n newBoard[index] = currentPlayer' },
  { content: ';\n setBoard(newBoard);' },
  { content: '\n \n if (!checkWinner(newBoar' },
  { content: 'd)) {\n // If' },
  { content: ' no winner, switch player\n setCurrentPlayer' },
  { content: '(currentPlayer === \u0022X\u0022 ? \u0022O' },
  { content: '\u0022 : \u0022X\u0022);\n ' },
  { content: '\n // Check for draw' },
  { content: '\n if (newBoard.every((cell' },
  { content: ') =\u003E cell !== null)) {\n setTimeout' },
  { content: '(() =\u003E setShowGameOverModal(true),' },
  { content: ' 500);\n }\n }' },
  { content: '\n };\n\n // AI' },
  { content: ' move\n useEffect(() =\u003E {' },
  { content: '\n if (aiMode \u0026\u0026 current' },
  { content: 'Player === \u0022O\u0022 \u0026\u0026 !winner \u0026\u0026' },
  { content: ' !isDraw) {\n ' },
  { content: 'const makeAiMove = () =\u003E {' },
  { content: '\n // Find empty cells\n const empt' },
  { content: 'yCells = board\n .map' },
  { content: '((cell, index) =\u003E (cell === null' },
  { content: ' ? index : null))\n .filter((' },
  { content: 'index) =\u003E index !== null' },
  { content: ') as number[];\n\n if' },
  { content: ' (emptyCells.length \u003E 0)' },
  { content: ' {\n // Simple AI: randomly' },
  { content: ' select an empty cell' },
  { content: '\n const randomIndex = Math.floor(Math' },
  { content: '.random() * emptyCells.length);' },
  { content: '\n const aiM' },
  { content: 'oveIndex = emptyCells[randomIndex];' },
  { content: '\n \n const' },
  { content: ' newBoard = [...board];\n newBoar' },
  { content: 'd[aiMoveIndex' },
  { content: '] = \u0022O\u0022;\n setBoard(' },
  { content: 'newBoard);\n \n if' },
  { content: ' (!checkWinner(new' },
  { content: 'Board)) {\n set' },
  { content: 'CurrentPlayer(\u0022X\u0022);' },
  { content: '\n }\n ' },
  { content: '}\n };\n\n // Ad' },
  { content: 'd a small delay to make the AI' },
  { content: ' move feel more natural\n const' },
  { content: ' timer = setTimeout(makeA' },
  { content: 'iMove, 600);\n return ()' },
  { content: ' =\u003E clearTimeout(timer);\n }' },
  { content: '\n }, [board, currentPlayer, ai' },
  { content: 'Mode, winner, isDraw]);\n\n //' },
  { content: ' Reset the game\n const reset' },
  { content: 'Game = () =\u003E {\n setBoard(' },
  { content: 'Array(9).fill(null));\n ' },
  { content: 'setCurrentPlayer(\u0022X\u0022);\n setW' },
  { content: 'inner(null);\n setWinning' },
  { content: 'Combination(null);\n setShow' },
  { content: 'GameOverModal(false);\n };' },
  { content: '\n\n // Handle AI mode toggle\n const' },
  { content: ' handleToggleAiMode =' },
  { content: ' () =\u003E {\n setAiMode(!' },
  { content: 'aiMode);\n resetGame();\n };' },
  { content: '\n\n return (\n \u003Cdiv className=\u0022' },
  { content: 'flex flex-col items-center justify-center p' },
  { content: '-4 gap-4\u0022\u003E\n ' },
  { content: '\u003CGameStatus currentPlayer={currentPlayer}' },
  { content: ' winner={winner} isDraw={isDraw}' },
  { content: ' /\u003E\n \n \u003CBoard ' },
  { content: '\n board={board} \n on' },
  { content: 'CellClick={handleCellClick} ' },
  { content: '\n winningCombination={winning' },
  { content: 'Combination} \n game' },
  { content: 'Over={!!winner || isDraw}' },
  { content: ' \n /\u003E\n \n \u003CGame' },
  { content: 'Controls\n onR' },
  { content: 'eset={resetGame}\n ai' },
  { content: 'Mode={aiMode}\n onToggle' },
  { content: 'AiMode={handleToggleAiMode' },
  { content: '}\n /\u003E\n \n \u003CGame' },
  { content: 'OverModal\n isOpen={showGameOver' },
  { content: 'Modal}\n onClose={() =\u003E setShow' },
  { content: 'GameOverModal(false)}\n winner={' },
  { content: 'winner}\n onPlay' },
  { content: 'Again={resetGame}\n /\u003E' },
  { content: '\n \u003C/div\u003E\n );\n};' },
  { content: '\n\nexport default TicTacToe;' },
  { content: '\n\u003C/llm_action_ad' },
  { content: 'd_file\u003E\u003C/mimo-action\u003E' },
  { content: '\n\n\u003Cmimo-action\u003E\u003Cllm_action_' },
  { content: 'replace_file path=\u0022client/src/App' },
  { content: '.tsx\u0022\u003E\n\u003Cold_lines' },
  { content: '_to_replace\u003Eimport * as React from \u0027' },
  { content: 'react\u0027;\nimport { Button }' },
  { content: ' from \u0027@/components/ui/' },
  { content: 'button\u0027;\nimport { ThemeProvider' },
  { content: ' } from \u0022@/components/T' },
  { content: 'icTacToe/ThemeProvider\u0022;' },
  { content: '\nimport \u0027./ts-error' },
  { content: '-overlay\u0027;\nimport { showType' },
  { content: 'ScriptError } from \u0027./ts-' },
  { content: 'error-overlay\u0027;\n\nfunction' },
  { content: ' App() {\n const' },
  { content: ' [data, setData] =' },
  { content: ' React.useState\u003Cany\u003E(null);\n\n const' },
  { content: ' triggerError = () =\u003E {\n console' },
  { content: '.log(\u0027Manually triggering Type' },
  { content: 'Script error\u0027);\n showTypeScriptError' },
  { content: '(\n \u0027This is' },
  { content: ' a manually triggered TypeScript error for' },
  { content: ' testing\u0027,\n );\n };' },
  { content: '\n\n React.useEffect(() =\u003E {\n fetch(\u0027/' },
  { content: 'api/hello\u0027)\n .then((response' },
  { content: ') =\u003E response.json())\n .then' },
  { content: '((data) =\u003E setData(data))' },
  { content: '\n .catch((error) =\u003E {' },
  { content: '\n console.error(\u0027Error fetching data' },
  { content: ':\u0027, error);\n });\n }, [' },
  { content: ']);\n\n return (\n \u003Cdiv' },
  { content: ' className=\u0022min-h-screen bg' },
  { content: '-gray-100\u0022\u003E\n \u003Cdiv' },
  { content: ' className=\u0022container mx-auto px-4 ' },
  { content: 'py-8\u0022\u003E\n \u003Ch1 ' },
  { content: 'className=\u0022text-4xl font-bold text' },
  { content: '-red-500\u0022\u003E\n No' },
  { content: '-Code Project Creator 2' },
  { content: '\n \u003C/h1\u003E\n {' },
  { content: 'data \u0026\u0026 \u003Cp\u003E{data.message}\u003C/p' },
  { content: '\u003E}\n \u003CButton\u003E' },
  { content: 'Click me\u003C/Button\u003E\n \u003CButton variant' },
  { content: '=\u0022outline\u0022\u003EButton\u003C/Button\u003E\n ' },
  { content: '\u003Cdiv style={{ marginTop: \u002720' },
  { content: 'px\u0027 }}\u003E\n \u003Cbutton' },
  { content: '\n onClick={trigger' },
  { content: 'Error}\n style={{' },
  { content: '\n padding: \u002710px ' },
  { content: '20px\u0027,\n backgroundColor: \u0027#' },
  { content: 'e83b46\u0027,\n color:' },
  { content: ' \u0027white\u0027,\n border: \u0027' },
  { content: 'none\u0027,\n borderRadius: \u00274px' },
  { content: '\u0027,\n cursor: \u0027pointer\u0027,' },
  { content: '\n fontWeight: \u0027bol' },
  { content: 'd\u0027,\n }}\n \u003E\n Test' },
  { content: ' Error Boundary\n \u003C/button\u003E' },
  { content: '\n \u003C/div\u003E\n \u003C/div\u003E' },
  { content: '\n \u003C/div\u003E\n );\n}' },
  { content: '\n\nexport default App;\u003C/old_lines_to' },
  { content: '_replace\u003E\n\u003Cnew_lines_to' },
  { content: '_add\u003Eimport * as React' },
  { content: ' from \u0027react\u0027;\nimport { Button }' },
  { content: ' from \u0027@/components/ui/button\u0027;' },
  { content: '\nimport { ThemeProvider } from \u0022@/components' },
  { content: '/TicTacToe/Theme' },
  { content: 'Provider\u0022;\nimport TicTacToe' },
  { content: ' from \u0027@/components/Tic' },
  { content: 'TacToe/TicTacT' },
  { content: 'oe\u0027;\nimport \u0027./ts-error-overlay' },
  { content: '\u0027;\nimport { showTypeScriptError }' },
  { content: ' from \u0027./ts-error-overlay\u0027;\n\nfunction' },
  { content: ' App() {\n const [data, set' },
  { content: 'Data] = React.useState\u003Cany\u003E(null' },
  { content: ');\n\n const triggerError = () =\u003E' },
  { content: ' {\n console.log(\u0027Manually trigg' },
  { content: 'ering TypeScript error\u0027);\n showTypeSc' },
  { content: 'riptError(\n \u0027This is a manually' },
  { content: ' triggered TypeScript error for testing\u0027,\n );' },
  { content: '\n };\n\n React.useEffect(()' },
  { content: ' =\u003E {\n fetch(\u0027/api/hello\u0027)' },
  { content: '\n .then((response) =\u003E response.' },
  { content: 'json())\n .then((data) =\u003E' },
  { content: ' setData(data))\n .catch((' },
  { content: 'error) =\u003E {\n console.error(\u0027' },
  { content: 'Error fetching data:\u0027, error);\n });' },
  { content: '\n }, []);\n\n return (' },
  { content: '\n \u003CThemeProvider defaultTheme=\u0022system' },
  { content: '\u0022\u003E\n \u003Cdiv className=\u0022min-h' },
  { content: '-screen bg-background\u0022\u003E\n \u003Cdiv' },
  { content: ' className=\u0022container mx-auto px-4 ' },
  { content: 'py-8\u0022\u003E\n \u003Ch1 ' },
  { content: 'className=\u0022text-3xl font-bold text' },
  { content: '-center mb-8\u0022\u003E\n ' },
  { content: 'Tic Tac Toe Game\n ' },
  { content: '\u003C/h1\u003E\n ' },
  { content: '\n \u003CTicTacToe /\u003E' },
  { content: '\n \n \u003Cdiv className=\u0022mt' },
  { content: '-12 text-center\u0022\u003E' },
  { content: '\n \u003Cdiv className=\u0022flex justify-center space' },
  { content: '-x-4\u0022\u003E\n \u003CButton size' },
  { content: '=\u0022sm\u0022 onClick={triggerError' },
  { content: '} variant=\u0022destructive\u0022\u003E\n Test' },
  { content: ' Error Boundary\n \u003C/Button\u003E\n ' },
  { content: '\u003C/div\u003E\n {data \u0026\u0026 \u003Cp className' },
  { content: '=\u0022mt-4 text-m' },
  { content: 'uted-foreground\u0022\u003E{data.message}\u003C/p\u003E' },
  { content: '}\n \u003C/div\u003E\n \u003C/div' },
  { content: '\u003E\n \u003C/div\u003E\n \u003C/Th' },
  { content: 'emeProvider\u003E\n );\n}\n\nexport' },
  { content: ' default App;\u003C/new_lines_to_ad' },
  { content: 'd\u003E\n\u003C/llm_action_replace' },
  { content: '_file\u003E\u003C/mimo-action\u003E\n\n\u003Cmimo' },
  { content: '-action\u003E\u003Cllm_action_install' },
  { content: '_package name=\u0022framer-motion\u0022\u003E' },
  { content: '\u003C/llm_action_install_package\u003E\u003C/mimo' },
  { content: '-action\u003E' },
];

const streamParser = new StreamParser();

messages.forEach((message) => {
  streamParser.addChunk(message.content);
});

const result = streamParser.consumeBuffer();
const messagesResult = updateMessages([], result);

console.log(result)

console.log(messagesResult);
